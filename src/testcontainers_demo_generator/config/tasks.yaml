analyze_requirements:
  description: >
    Analyze requirements for a %(language)s application with Testcontainers tests:
    
    Application Requirements:
    - Follow %(language)s best practices
    - Implement proper business logic
    - Use appropriate frameworks and patterns
    
    Testing Requirements:
    - Use Testcontainers for %(services)s integration testing
    - Implement proper test lifecycle management
    - Follow testing best practices
  expected_output: >
    A detailed analysis including:
    1. Application architecture and patterns
    2. Framework recommendations
    3. Testcontainers setup and configuration
    4. Testing strategy and patterns
  agent: documentation_researcher

design_solution:
  description: >
    Design a %(language)s application with Testcontainers-based tests:
    
    Application Design:
    - Clean architecture following %(language)s best practices
    - Proper separation of concerns
    - Well-structured business logic
    - Appropriate error handling
    
    Test Design:
    - Testcontainers integration with %(services)s
    - Test data management
    - Container lifecycle handling
    - Cleanup strategies
  expected_output: >
    A complete design including:
    1. Application Architecture:
       - Class diagrams
       - Component interactions
       - Data models
       - Service layer design
    
    2. Test Architecture:
       - Testcontainers setup
       - Test class structure
       - Data setup patterns
       - Cleanup strategies
  agent: solution_architect

generate_implementation:
  description: >
    Create a comprehensive implementation with separate application and test code.
    
    APPLICATION CODE REQUIREMENTS:
    1. Follow %(language)s best practices.
    2. Write code for all required business logic.
    
    TEST CODE REQUIREMENTS:
    1. Use Testcontainers properly following best practices for %(language)
    2. Setup test data in %(services)s
    3. Write test implementation code in all test methods.
    4. Write assertions implementation for valudation of business logic.

  expected_output: >
    A complete implementation with:
    
    1. Application Code:
       - Clean architecture
       - Proper dependency injection
       - Error handling
       - Logging
       - Transaction management
    
    2. Test Code:
       - Testcontainers setup
       - Integration tests
       - Data management
       - Proper cleanup
    
    3. NO:
       - Commented code
       - TODOs
       - Placeholder implementations
  agent: implementation_engineer